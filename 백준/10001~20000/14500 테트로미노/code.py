input=open(0).readline
#TIOLJSZ : 왼쪽 위 (0,0)오른쪽기준[0,90,180,270]
minos=[[(0,0),(-1,1),(0,1),(1,1)], #T1
       [(0,0),(0,1),(1,1),(0,2)], #T2
       [(0,0),(1,0),(2,0),(1,1)], #T3
       [(0,0),(-1,1),(0,1),(0,2)], #T4
       [(0,0),(0,1),(0,2),(0,3)], #I1
       [(0,0),(1,0),(2,0),(3,0)], #I2
       [(0,0),(1,0),(0,1),(1,1)], #O
       [(0,0),(0,1),(0,2),(1,2)], #L1
       [(0,0),(1,0),(2,0),(0,1)], #L2
       [(0,0),(1,0),(1,1),(1,2)], #L3
       [(0,0),(0,1),(-1,1),(-2,1)], #L4
       [(0,0),(0,1),(0,2),(-1,2)], #J1
       [(0,0),(0,1),(1,1),(2,1)], #J2
       [(0,0),(1,0),(0,1),(0,2)], #J3
       [(0,0),(1,0),(2,0),(2,1)], #J4
       [(0,0),(1,0),(0,1),(-1,1)], #S1
       [(0,0),(0,1),(1,1),(1,2)], #S2
       [(0,0),(1,0),(1,1),(2,1)], #Z1
       [(0,0),(0,1),(-1,1),(-1,2)]] #Z2
                    
                    
def try_place(N,M,x,y):
    return 1 if 0<=y<N and 0<=x<M else 0 

def place(board,N,M):
    ms=0
    for i in range(N):
        for j in range(M):
            for k in minos:
                ts=0
                for dx,dy in k:
                    if try_place(N,M,j+dx,i+dy):
                        ts+=board[i+dy][j+dx]
                    else:
                        break
                else:
                    ms=max(ms,ts)
    return ms
                            
def main():
    N,M=map(int,input().split())
    board=[[*map(int,input().split())]for _ in range(N)]
    print(place(board,N,M))
main()
